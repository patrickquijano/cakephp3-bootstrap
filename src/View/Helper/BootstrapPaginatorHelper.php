<?php

namespace Bootstrap\View\Helper;

use Cake\Utility\Hash;
use Cake\Utility\Inflector;
use Cake\View\Helper\PaginatorHelper;

/**
 * Bootstrap Paginator Helper
 */
class BootstrapPaginatorHelper extends PaginatorHelper {

    /**
     * The template used
     *
     * @var string
     */
    private $_template = 'default';

    /**
     * Template set
     *
     * @var array
     */
    private $_templateSet = [
        'default' => [
            'nextActive' => '<li class="page-item"><a class="page-link" rel="next" aria-label="Next" href="{{url}}"><span aria-hidden="true">{{text}}</span></a></li>',
            'nextDisabled' => '<li class="page-item disabled"><span class="page-link" aria-hidden="true">{{text}}</span></li>',
            'prevActive' => '<li class="page-item"><a class="page-link" rel="prev" aria-label="Previous" href="{{url}}"><span aria-hidden="true">{{text}}</span></a></li>',
            'prevDisabled' => '<li class="page-item disabled"><span class="page-link" aria-hidden="true">{{text}}</span></a></li>',
            'first' => '<li class="page-item"><a class="page-link" aria-label="First" href="{{url}}">{{text}}</a></li>',
            'last' => '<li class="page-item"><a class="page-link" aria-label="Last" href="{{url}}">{{text}}</a></li>',
            'number' => '<li class="page-item"><a class="page-link" href="{{url}}">{{text}}</a></li>',
            'current' => '<li class="page-item active"><span class="page-link">{{text}}</span> <span class="sr-only">(current)</span></li>',
            'ellipsis' => '<li class="page-item disabled"><span class="page-link">&hellip;</span></li>',
            'sort' => '<a href="{{url}}"{{class}}>{{text}}{{icon}}</a>',
            'sortAsc' => '<a href="{{url}}"{{class}}>{{text}}{{iconAsc}}</a>',
            'sortDesc' => '<a href="{{url}}"{{class}}>{{text}}{{iconDesc}}</a>',
        ],
    ];

    /**
     * Constructor hook method.
     *
     * Implement this method to avoid having to overwrite the constructor and call parent.
     *
     * @param array $config The configuration settings provided to this helper.
     * @return void
     */
    public function initialize(array $config) {
        $defaultConfig = ['templates' => $this->_templateSet[$this->_template]];
        $this->setConfig($defaultConfig);
    }

    /**
     * Generates a sorting link. Sets named parameters for the sort and direction. Handles
     * direction switching automatically.
     *
     * ### Options:
     *
     * - `escape` Whether you want the contents html entity encoded, defaults to true.
     * - `model` The model to use, defaults to PaginatorHelper::defaultModel().
     * - `direction` The default direction to use when this link isn't active.
     * - `lock` Lock direction. Will only use the default direction then, defaults to false.
     * - `class` The class for the link.
     * - `icon` The icon for the default link. Can be a text or HTML code.
     * - `iconAsc` The icon for the ascending sort. Can be a text or HTML tag.
     * - `iconDesc` The icon for the descending sort. Can be a text or HTML tag.
     *
     * @param string $key The name of the key that the recordset should be sorted.
     * @param string|array|null $title Title for the link. If $title is null $key will be used
     *   for the title and will be generated by inflection. It can also be an array
     *   with keys `asc` and `desc` for specifying separate titles based on the direction.
     * @param array $options Options for sorting link. See above for list of keys.
     * @return string A link sorting default by 'asc'. If the resultset is sorted 'asc' by the specified
     *  key the returned link will sort by 'desc'.
     */
    public function sort($key, $title = null, array $options = array()) {
        $options += ['url' => [], 'model' => null, 'escape' => true];
        $url = $options['url'];
        unset($options['url']);
        if (empty($title)) {
            $title = $key;
            if (strpos($title, '.') !== false) {
                $title = str_replace('.', ' ', $title);
            }
            $title = __(Inflector::humanize(preg_replace('/_id$/', '', $title)));
        }
        $defaultDir = isset($options['direction']) ? strtolower($options['direction']) : 'asc';
        unset($options['direction']);
        $locked = isset($options['lock']) ? $options['lock'] : false;
        unset($options['lock']);
        $sortKey = $this->sortKey($options['model']);
        $defaultModel = $this->defaultModel();
        $model = $options['model'] ?: $defaultModel;
        list($table, $field) = explode('.', $key . '.');
        if (!$field) {
            $field = $table;
            $table = $model;
        }
        $isSorted = $sortKey === $table . '.' . $field ||
            $sortKey === $model . '.' . $key ||
            $table . '.' . $field === $model . '.' . $sortKey;
        $template = 'sort';
        $dir = $defaultDir;
        if ($isSorted) {
            if ($locked) {
                $template = $dir === 'asc' ? 'sortDescLocked' : 'sortAscLocked';
            } else {
                $dir = $this->sortDir($options['model']) === 'asc' ? 'desc' : 'asc';
                $template = $dir === 'asc' ? 'sortDesc' : 'sortAsc';
            }
        }
        if (is_array($title) && array_key_exists($dir, $title)) {
            $title = $title[$dir];
        }
        $url = array_merge(
            ['sort' => $key, 'direction' => $dir, 'page' => 1],
            $url,
            ['order' => null]
        );
        $vars = [
            'text' => $options['escape'] ? h($title) : $title,
            'url' => $this->generateUrl($url, $options['model']),
        ];
        if (isset($options['class'])) {
            $vars = Hash::merge($vars, ['class' => __(' class="{0}"', $options['class'])]);
        }
        if (isset($options['icon'])) {
            $vars = Hash::merge($vars, ['icon' => $options['icon']]);
        }
        if (isset($options['iconAsc'])) {
            $vars = Hash::merge($vars, ['iconAsc' => $options['iconAsc']]);
        }
        if (isset($options['iconDesc'])) {
            $vars = Hash::merge($vars, ['iconAsc' => $options['iconDesc']]);
        }
        return $this->templater()->format($template, $vars);
    }

    /**
     * Generates the Bootstrap pagination links.
     *
     * @param array $options
     * @return string|null
     */
    public function paginate(array $options = array()) {
        $size = '';
        if (isset($options['size'])) {
            $size = ' pagination-' . $options['size'];
            unset($options['size']);
        }
        $alignment = '';
        if (isset($options['alignment'])) {
            $size = ' justify-content-' . $options['alignment'];
            unset($options['alignment']);
        }
        $options = Hash::merge($options, [
                'first' => $options['first'] ?? 2,
                'last' => $options['last'] ?? 2,
                'modulus' => $options['modulus'] ?? 5,
        ]);
        $firstLabel = __('First');
        if (isset($options['firstLabel'])) {
            $firstLabel = $options['firstLabel'];
            unset($options['firstLabel']);
        }
        $lastLabel = __('Next');
        if (isset($options['lastLabel'])) {
            $lastLabel = $options['lastLabel'];
            unset($options['lastLabel']);
        }
        $previousLabel = __('Previous');
        if (isset($options['previousLabel'])) {
            $previousLabel = $options['previousLabel'];
            unset($options['previousLabel']);
        }
        $nextLabel = __('Next');
        if (isset($options['nextLabel'])) {
            $nextLabel = $options['nextLabel'];
            unset($options['nextLabel']);
        }
        $numbers = $this->numbers($options);
        if (!empty($numbers)) {
            return $this->Html->tag('ul', __('{0}{1}{2}{3}{4}', $this->first($firstLabel), $this->prev($previousLabel), $numbers, $this->next($nextLabel), $this->last($lastLabel)), ['class' => 'pagination' . $size . $alignment]);
        }
        return null;
    }

}
